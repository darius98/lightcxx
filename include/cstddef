#ifndef __LIGHTCXX_GUARD_CSTDDEF
#define __LIGHTCXX_GUARD_CSTDDEF

#include <__lightcxx/__builtins.h>
#include <__lightcxx/__type_traits_builtins.h>

#ifndef __cpp_lib_byte
#define __cpp_lib_byte 201603L
#else
#if __cpp_lib_byte != 201603L
#error "Conflicting versions for __cpp_lib_byte"
#endif
#endif

#ifdef NULL
#undef NULL  // We make our own!
#endif
#define NULL 0L

#define offsetof(__type, __member) __builtin_offsetof(__type, __member)

namespace std {

using ptrdiff_t = decltype(static_cast<int*>(nullptr) - static_cast<int*>(nullptr));

using size_t = decltype(sizeof(void*));

using max_align_t = _Light::_MaxAlignT;

using nullptr_t = decltype(nullptr);

enum class byte : unsigned char {};

template<class _T>
requires(_Light::_IsIntegral<_T>) constexpr byte operator<<(byte __b, _T __shift) noexcept {
    return static_cast<byte>(static_cast<unsigned int>(__b) << __shift);
}

template<class _T>
requires(_Light::_IsIntegral<_T>) constexpr byte& operator<<=(byte& __b, _T __shift) noexcept {
    return __b = __b << __shift;
}

template<class _T>
requires(_Light::_IsIntegral<_T>) constexpr byte operator>>(byte __b, _T __shift) noexcept {
    return static_cast<byte>(static_cast<unsigned int>(__b) >> __shift);
}

template<class _T>
requires(_Light::_IsIntegral<_T>) constexpr byte& operator>>=(byte& __b, _T __shift) noexcept {
    return __b = __b >> __shift;
}

constexpr byte operator|(byte __l, byte __r) noexcept {
    return static_cast<byte>(static_cast<unsigned int>(__l) | static_cast<unsigned int>(__r));
}

constexpr byte& operator|=(byte& __l, byte __r) noexcept {
    return __l = __l | __r;
}

constexpr byte operator&(byte __l, byte __r) noexcept {
    return static_cast<byte>(static_cast<unsigned int>(__l) & static_cast<unsigned int>(__r));
}

constexpr byte& operator&=(byte& __l, byte __r) noexcept {
    return __l = __l & __r;
}

constexpr byte operator^(byte __l, byte __r) noexcept {
    return static_cast<byte>(static_cast<unsigned int>(__l) ^ static_cast<unsigned int>(__r));
}

constexpr byte& operator^=(byte& __l, byte __r) noexcept {
    return __l = __l ^ __r;
}

constexpr byte operator~(byte __b) noexcept {
    return static_cast<byte>(~static_cast<unsigned int>(__b));
}

template<class _T>
requires(_Light::_IsIntegral<_T>) constexpr _T to_integer(byte __b) noexcept {
    return static_cast<_T>(__b);
}

}  // namespace std

#endif
